#version 330
out vec4 fragColor;

in vec2 TexCoord;
in vec4 vertexColor; //for testing purposes
in float z_negative;
in vec3 normal;
in vec3 fragmentPos;

uniform sampler2D texture1;
uniform sampler2D texture2;
uniform sampler2D rainbow;
uniform vec3 lightPos;
 
void main()
{
//ambient light
float ambient_strength = 0.1f;
vec3 light_color = vec3(1.0f,1.0f,1.0f);
vec3 ambientLight = ambient_strength*light_color;

//diffuse light
vec3 norm = normalize(normal);
vec3 light_direction = normalize(lightPos - fragmentPos);
float diff = max(dot(norm, light_direction), 0.0);
vec3 diffuseLight = diff * light_color;

//specular light
float specular_strength = 0.5f;
vec3 viewDir = normalize(-fragmentPos);
vec3 reflectDir = reflect(-light_direction, norm);
float spec = pow(max(dot(viewDir, reflectDir), 0.0f), 32);
vec3 specularLight = specular_strength * spec * light_color;

//foil reflection
float dot1 = dot(viewDir, reflectDir);
float winkel = acos(dot1);
float min_winkel = 5;
float closeness = 1;
float x = (mod(winkel, closeness))/(closeness);
vec2 rainbow_coord = vec2(x, 0.5f); //x between 0 and 1
vec3 reflection_color = 0.3f*vec3(texture(rainbow, rainbow_coord, 0.5f));

//vec3 refection_color = vec3(texture(rainbow, rainbow_coord));

//overall light
vec3 ligthing = (ambientLight + specularLight + diffuseLight + reflection_color);

//texture ligthing
vec4 texture1_light = texture(texture1, TexCoord) * (vec4(ligthing, 1.0f));
vec4 texture2_light = texture(texture2, vec2(1.0-TexCoord.x, TexCoord.y)) * (vec4(ligthing, 1.0f));

if (z_negative == 0.0f){
	fragColor = texture2_light;
}else{
	fragColor = texture1_light;
}

}
//test_cases
//fragColor = vec4(z_negative, 0.0, 1.0, 1.0);
//fragColor = texture(texture1, TexCoord);
//fragColor = texture(texture2, vec2(1.0-TexCoord.x, TexCoord.y));
